To connect your PHP login script with a MariaDB database, you'll need to ensure that your database connection is correctly established using the mysqli or PDO extension. Below is a modified version of the login script that includes a proper MariaDB connection setup using mysqli:

db_connection.php
First, ensure you have a database connection file like db_connection.php:

php


Copy
<?php
$host = 'localhost'; // or your database host
$db = 'your_database_name'; // your database name
$user = 'your_database_user'; // your database username
$pass = 'your_database_password'; // your database password

// Create a new mysqli connection
$db = new mysqli($host, $user, $pass, $db);

// Check connection
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}
?>
login.php
Now, update your login.php script to use this connection:

php


Copy
<?php
session_start(); // Start the session

// Include database connection file
require_once 'db_connection.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get username and password from form
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Query to check credentials
    $query = "SELECT * FROM users WHERE username = ?";
    $stmt = $db->prepare($query);

    if ($stmt) {
        $stmt->bind_param('s', $username);
        $stmt->execute();
        $result = $stmt->get_result();

        // Check if user exists
        if ($result->num_rows == 1) {
            $user = $result->fetch_assoc();

            // Verify password
            if (password_verify($password, $user['password'])) {
                // Set session variables
                $_SESSION['loggedin'] = true;
                $_SESSION['username'] = $username;

                // Redirect to the dashboard or home page
                header("Location: dashboard.php");
                exit(); // Always call exit after a redirect
            } else {
                echo "Invalid password.";
            }
        } else {
            echo "No user found with that username.";
        }

        $stmt->close();
    } else {
        echo "Error preparing statement: " . $db->error;
    }
}

$db->close();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login</title>
</head>
<body>
    <form method="post" action="login.php">
        <input type="text" name="username" required placeholder="Username">
        <input type="password" name="password" required placeholder="Password">
        <button type="submit">Login</button>
    </form>
</body>
</html>
Key Points:
Database Connection: The connection is established using mysqli in db_connection.php. Replace 'your_database_name', 'your_database_user', and 'your_database_password' with your actual database credentials.
Prepared Statements: The script uses prepared statements to prevent SQL injection, which is crucial for security.
Password Verification: Ensure that passwords in your database are hashed using a function like password_hash() when they are stored. This script uses password_verify() to check the entered password against the stored hash.
Session Management: Sessions are used to track the login state. Make sure the session is started with session_start() at the beginning of the script.
Error Handling: The script includes basic error handling for database operations. You can expand this with more detailed logging or user feedback as needed.
This setup should help you connect your PHP login system to a MariaDB database and handle user authentication securely.
